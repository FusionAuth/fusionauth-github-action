name: "fusionauth-action"
description: "Run FusionAuth for testing your application in a GitHub workflow"
branding:
  icon: "user-check"
  color: "blue"
inputs:
  DATABASE_PASSWORD:
    description: "Database password used by FusionAuth"
    default: hkaLBM3RVnyYeYeqE3WI1w2e4Avpy0Wd5O3s3
  FUSIONAUTH_APP_KICKSTART_DIRECTORY_PATH:
    description: "Where your kickstart file and related include files live, relative to the checked out directory. If not provided, a default kickstart will be used."
    default:
  FUSIONAUTH_APP_KICKSTART_FILENAME:
    description: "The name of your kickstart file in FUSIONAUTH_APP_KICKSTART_DIRECTORY_PATH, otherwise this is ignored."
    default: "kickstart.json"
  FUSIONAUTH_APP_MEMORY:
    description: "FusionAuth application memory"
    default: 512M
  FUSIONAUTH_APP_RUNTIME_MODE:
    description: "FusionAuth application runtime mode"
    default: development
  DATABASE_USERNAME:
    description: "Database username used by FusionAuth"
    default: fusionauth
  FUSIONAUTH_URL:
    description: 'The FusionAuth URL.'
    required: false
    default: 'http://localhost:9011'
  FUSIONAUTH_VERSION:
    description: "FusionAuth version number"
    default: "latest"
  OPENSEARCH_JAVA_OPTS:
    description: "Opensearch configuration"
    default: '"-Xms512m -Xmx512m"'
  POSTGRES_USER:
    description: "Postgres default user"
    default: postgres
  POSTGRES_PASSWORD:
    description: "Postgres default password"
    default: postgres
runs:
  using: "composite"
  steps:
    - name: Action Path
      run: echo $ACTION_PATH
      env:
        ACTION_PATH: ${{ github.action_path }}
      shell: bash

    - name: Action Repository
      run: echo $ACTION_REPOSITORY
      env:
        ACTION_PATH: ${{ github.action_repository }}
      shell: bash

    - name: Action Ref
      run: echo $ACTION_REF
      env:
        ACTION_PATH: ${{ github.action_ref }}
      shell: bash

    - name: Process kickstart inputs
      run: scripts/copy-kickstart.sh
      working-directory: ${{ github.action_path }}
      env:
        FUSIONAUTH_APP_KICKSTART_FILENAME: ${{ inputs.FUSIONAUTH_APP_KICKSTART_FILENAME }}
        FUSIONAUTH_APP_KICKSTART_DIRECTORY_PATH: ${{ inputs.FUSIONAUTH_APP_KICKSTART_DIRECTORY_PATH }}
        GH_WORKSPACE_PATH: ${{ github.workspace }}
      shell: bash

    - name: Start FusionAuth
      run: docker compose up -d # -d in background
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        POSTGRES_USER: ${{ inputs.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ inputs.POSTGRES_PASSWORD }}
        DATABASE_USERNAME: ${{ inputs.DATABASE_USERNAME }}
        DATABASE_PASSWORD: ${{ inputs.DATABASE_PASSWORD }}
        FUSIONAUTH_APP_MEMORY: ${{ inputs.FUSIONAUTH_APP_MEMORY }}
        FUSIONAUTH_APP_RUNTIME_MODE: ${{ inputs.FUSIONAUTH_APP_RUNTIME_MODE }}
        FUSIONAUTH_APP_KICKSTART_FILE: /usr/local/fusionauth/kickstart/kickstart.json
        OPENSEARCH_JAVA_OPTS: ${{ inputs.OPENSEARCH_JAVA_OPTS }}
        FUSIONAUTH_VERSION: ${{ inputs.FUSIONAUTH_VERSION }}

    # Check FusionAuth status 5 times with increasing wait times.
    # Continue if FusionAuth status is OK or fail at the end.
    - name: Check FusionAuth status
      run: |
        for i in {1..5}; do
          if curl -s ${{ inputs.FUSIONAUTH_URL }}/api/status | grep -qi "ok"; then
            echo "FusionAuth is up and running."
            exit 0
          else
            echo "FusionAuth is not up and running. Waiting for $(expr 5 \* $i) seconds."
            sleep $(expr 5 \* $i)
          fi
        done
        exit 1
      shell: bash

# Start each service individually for testing instead:

    # - name: Start DB
    #   run: docker-compose up -d db
    #   shell: bash
    #   working-directory: faDockerComposeFilePath
    #   env:
    #     POSTGRES_USER: ${{ inputs.POSTGRES_USER }}
    #     POSTGRES_PASSWORD: ${{ inputs.POSTGRES_PASSWORD }}
    #     DATABASE_USERNAME: ${{ inputs.DATABASE_USERNAME }}
    #     DATABASE_PASSWORD: ${{ inputs.DATABASE_PASSWORD }}
    #     FUSIONAUTH_APP_MEMORY: ${{ inputs.FUSIONAUTH_APP_MEMORY }}
    #     FUSIONAUTH_APP_RUNTIME_MODE: ${{ inputs.FUSIONAUTH_APP_RUNTIME_MODE }}
    #     FUSIONAUTH_APP_KICKSTART_FILE: ${{ inputs.FUSIONAUTH_APP_KICKSTART_FILE }}
    #     OPENSEARCH_JAVA_OPTS: ${{ inputs.OPENSEARCH_JAVA_OPTS }}
    #     FUSIONAUTH_VERSION: ${{ inputs.FUSIONAUTH_VERSION }}

    # - name: Start Search
    #   run: docker-compose up -d search
    #   shell: bash
    #   working-directory: faDockerComposeFilePath
    #   env:
    #     POSTGRES_USER: ${{ inputs.POSTGRES_USER }}
    #     POSTGRES_PASSWORD: ${{ inputs.POSTGRES_PASSWORD }}
    #     DATABASE_USERNAME: ${{ inputs.DATABASE_USERNAME }}
    #     DATABASE_PASSWORD: ${{ inputs.DATABASE_PASSWORD }}
    #     FUSIONAUTH_APP_MEMORY: ${{ inputs.FUSIONAUTH_APP_MEMORY }}
    #     FUSIONAUTH_APP_RUNTIME_MODE: ${{ inputs.FUSIONAUTH_APP_RUNTIME_MODE }}
    #     FUSIONAUTH_APP_KICKSTART_FILE: ${{ inputs.FUSIONAUTH_APP_KICKSTART_FILE }}
    #     OPENSEARCH_JAVA_OPTS: ${{ inputs.OPENSEARCH_JAVA_OPTS }}
    #     FUSIONAUTH_VERSION: ${{ inputs.FUSIONAUTH_VERSION }}

    # - name: Start FusionAuth
    #   run: docker-compose up -d fusionauth # -f faDockerComposeFilePath/docker-compose.yaml
    #   shell: bash
    #   working-directory: faDockerComposeFilePath
    #   env:
    #     POSTGRES_USER: ${{ inputs.POSTGRES_USER }}
    #     POSTGRES_PASSWORD: ${{ inputs.POSTGRES_PASSWORD }}
    #     DATABASE_USERNAME: ${{ inputs.DATABASE_USERNAME }}
    #     DATABASE_PASSWORD: ${{ inputs.DATABASE_PASSWORD }}
    #     FUSIONAUTH_APP_MEMORY: ${{ inputs.FUSIONAUTH_APP_MEMORY }}
    #     FUSIONAUTH_APP_RUNTIME_MODE: ${{ inputs.FUSIONAUTH_APP_RUNTIME_MODE }}
    #     FUSIONAUTH_APP_KICKSTART_FILE: ${{ inputs.FUSIONAUTH_APP_KICKSTART_FILE }}
    #     OPENSEARCH_JAVA_OPTS: ${{ inputs.OPENSEARCH_JAVA_OPTS }}
    #     FUSIONAUTH_VERSION: ${{ inputs.FUSIONAUTH_VERSION }}
